<!-- <button type='submit' class='btn btn-default'>Enviar</button> -> Cria um botão e o nomeia como "ENVIAR" -->

<!-- <textarea name='content' class='form-control' placeholder='Digite seu texto aqui'></textarea> cria uma área de texto com um placeholder (espaço para escrever) focado no texto-->

<!-- <input type='email' class='form-control' name='email' placeholder='Digite seu email'>  cria uma área de texto com um placeholder (espaço para escrever) focado no email-->

<!--  <input type='text' class='form-control' name='fullname 'placeholder='Digite seu nome completo'>  cria uma área de texto com um placeholder (espaço para escrever) focado no nome completo-->

<!--  <form method='POST'> {% csrf_token %}  o método POST serve para enviar as informações para o back-end {% csrf_token %} serve para proteção de ataques maliciosos -->   

  <!-- COL-SM-6 (Em telas pequenas (a partir de 576px de largura) e maiores, essa coluna ocupa 6 colunas, ou seja, 50% da linha) -->

  <!--  <div class='col-sm-6 col-12'>   COL-12 (Em telas pequenas (mobile) e menores, essa coluna ocupa 12 colunas, ou seja, 100% da largura da linha.) -->

  <!--  <p>{{ content }}</p>  mostra o conteudo escrito na views.py na sessão do CONTACT -->

  <!--  <div class='col'>  colunas dentro de uma linha (.row). -->

  <!-- <div class='row'>  criar linhas de layout -->

  <!-- <div class='container'> class='container'é um framework como Bootstrap para aplicar estilos prontos, como centralizar conteúdo e definir largura máxima responsiva. -->

  <!-- class ContactForm(forms.Form):	Cria uma nova classe de formulário baseada em forms.Form do Django. -->
              
  <!-- widget=forms.TextInput()	Define que o campo será exibido como um <input type="text"> em HTML. -->

  <!-- attrs={}	Define atributos HTML adicionais para o campo (como class e placeholder)-->

  <!-- error_messages={'required': 'mensagem de erro'}, -->

  <!-- from .views import home_page, about_page, contact_page, login_page, register_page = import do views.py as funções home_page, about_page, etc. --> 

  <!-- return redirect("/") = retorna o usuário, pós login sucesso, para a home page principal -->

   <!-- username = forms.CharField() -> aceita apenas caracteres (não arquivos, nem números puros, etc.) -->

  <!-- password = forms.CharField(widget=forms.PasswordInput) ->  Os caracteres digitados ficam escondidos com bolinhas ou asteriscos no navegador. -->

  <!--  username = self.cleaned_data.get('username') -> pega os dados validados e "limpos" do formulário. -->

   <!--  qs = User.objects.filter(username=username) -> qs é uma queryset, ou seja, uma "lista" de objetos que vêm do banco de dados.

   User.objects -> a “porta de entrada” para fazer consultas.

   .filter(username=username) -> cria uma queryset com todos os usuários cujo campo username é igual ao valor da variável username. -->

   <!--  if qs.exists(): ->verifica se a qs ja existe

  raise forms.ValidationError("Esse usuário já existe, escolha outro nome.") -> verifica se a informação já existe no banco de dados-->


  <!-- != significa (É DIFERENTE DE)-->